{"version":3,"sources":["Clock.tsx","Photo.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Clock","useState","Date","currentTime","setCurrentTime","useEffect","timerId","setInterval","clearInterval","StyledClock","toLocaleTimeString","styled","div","Photo","imgWidth","window","innerWidth","imgHeight","innerHeight","imgSrc","StyledPhoto","width","height","src","App","className","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"owBAIA,IAqBeA,EArBQ,WAAO,IAAD,EAEaC,oBAAS,kBAAM,IAAIC,QAFhC,mBAElBC,EAFkB,KAELC,EAFK,KAczB,OAXAC,qBAAU,WACN,IAAIC,EAAUC,aAAY,WAO1BH,EAAe,IAAIF,QAPkB,KACrC,OAAO,WACHM,cAAcF,OASlB,kBAACG,EAAD,KACI,8BAAON,EAAYO,wBAOzBD,EAAcE,IAAOC,IAAV,K,wFCvBjB,IAceC,EAdS,WAEpB,IAAMC,EAAWC,OAAOC,WAClBC,EAAYF,OAAOG,YACnBC,EAAM,kCAA8BL,EAA9B,YAA0CG,EAA1C,QAEZ,OACI,kBAACG,EAAD,KACI,kBAAC,EAAD,MACA,yBAAKC,MAAOP,EAAUQ,OAAQL,EAAWM,IAAKJ,MAOpDC,EAAcT,IAAOC,IAAV,K,MCNFY,MARf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,QCGcC,QACW,cAA7BX,OAAOY,SAASC,UAEe,UAA7Bb,OAAOY,SAASC,UAEhBb,OAAOY,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.e304c819.chunk.js","sourcesContent":["import { cleanup } from '@testing-library/react'\nimport React, { useEffect, useState } from 'react'\nimport styled from 'styled-components'\n\nconst Clock:React.FC = () => {\n\n    const [currentTime, setCurrentTime] = useState(() => new Date())\n    useEffect(() => {\n        let timerId = setInterval(()=>tick(),1000);\n        return function cleanup(){\n            clearInterval(timerId);\n        };\n    })\n\n    function tick() {\n        setCurrentTime(new Date());\n    }\n\n    return (\n        <StyledClock>\n            <span>{currentTime.toLocaleTimeString()}</span>\n        </StyledClock>\n    )\n}\n\nexport default Clock\n\nconst StyledClock = styled.div`\n    font-size: 50px;\n    font-weight: 900;\n    z-index: 2;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    position: absolute;\n    flex: 1;\n    align-self: 'absolute';\n    align-items: 'center';\n    justify-content: 'center';\n    text-shadow: 1px 1px 0 #FFF, -1px -1px 0 #FFF,\n              -1px 1px 0 #FFF, 1px -1px 0 #FFF,\n              0px 1px 0 #FFF,  0-1px 0 #FFF,\n              -1px 0 0 #FFF, 1px 0 0 #FFF;\n`\n","import React from 'react'\nimport styled from 'styled-components'\nimport Clock from './Clock'\n\nconst Photo: React.FC = () => {\n\n    const imgWidth = window.innerWidth\n    const imgHeight = window.innerHeight\n    const imgSrc = `https://loremflickr.com/${imgWidth}/${imgHeight}/cat`\n\n    return (\n        <StyledPhoto>\n            <Clock />\n            <img width={imgWidth} height={imgHeight} src={imgSrc}/>\n        </StyledPhoto>\n    )\n}\n\nexport default Photo\n\nconst StyledPhoto = styled.div`\n    z-index: 1;\n`\n","import React from 'react';\nimport logo from './logo.svg';\nimport Clock from './Clock';\nimport Photo from './Photo';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Photo />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}