{"version":3,"sources":["Clock.tsx","Photo.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["imgHeight","window","innerHeight","Clock","currentTime","useContext","ClockContext","addEventListener","location","reload","StyledClock","id","toLocaleDateString","toLocaleTimeString","styled","div","Photo","imgWidth","innerWidth","useState","currentImgSrc","setCurrentImgSrc","useEffect","console","log","slice","StyledPhoto","width","height","src","createContext","Date","App","setCurrentTime","timerId","setInterval","clearInterval","className","Provider","value","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"q3CAIA,IAAIA,EAAYC,OAAOC,YAuBRC,EArBQ,WAEnB,IAAMC,EAAcC,qBAAWC,GAO/B,OAJAL,OAAOM,iBAAiB,qBAAqB,WACzCN,OAAOO,SAASC,YAIhB,6BACI,kBAACC,EAAD,KACI,4BACI,4BAAI,0BAAMC,GAAG,QAAQP,EAAYQ,uBACjC,4BAAI,0BAAMD,GAAG,QAAQP,EAAYS,2BAS/CH,EAAcI,IAAOC,IAAV,IAKNf,EAAU,EAAI,GA8BVA,EAAU,EAAI,IAgBdA,EAAU,EAAI,I,wFC3E7B,IA+BegB,EA/BS,WAEpB,IAAIC,EAAWhB,OAAOiB,WAClBlB,EAAYC,OAAOC,YAGjBE,GAFI,kCAA8Ba,EAA9B,YAA0CjB,EAA1C,QAEUK,qBAAWC,IANL,EAWgBa,oBAAS,mDAAgCF,EAAhC,YAA4CjB,EAA5C,WAXzB,mBAWnBoB,EAXmB,KAWJC,EAXI,OAYUF,oBAAS,mDAAgCF,EAAhC,YAA4CjB,EAA5C,WAZnB,6BAuB1B,OATAsB,qBAAU,WACN,OAAO,WACHC,QAAQC,IAAR,6BAAkCpB,IACiB,MAAhDA,EAAYS,qBAAqBY,MAAM,EAAG,IACzCJ,EAAiB,2BAAD,OAA4BJ,EAA5B,YAAwCjB,EAAxC,iBAA0DI,QAMlF,kBAACsB,EAAD,KACI,kBAAC,EAAD,MACA,yBAAKC,MAAOV,EAAUW,OAAQ5B,EAAW6B,IAAKT,MAOpDM,EAAcZ,IAAOC,IAAV,KClCJT,G,MAAewB,wBAAc,IAAIC,OAyB/BC,MAvBf,WAAgB,IAAD,EACyBb,oBAAS,kBAAM,IAAIY,QAD5C,mBACN3B,EADM,KACO6B,EADP,KAcb,OAXAX,qBAAU,WACR,IAAIY,EAAUC,aAAY,WAOxBF,EAAe,IAAIF,QAPgB,KACrC,OAAO,WACHK,cAAcF,OASlB,yBAAKG,UAAU,OACb,kBAAC/B,EAAagC,SAAd,CAAuBC,MAAOnC,GAC5B,kBAAC,EAAD,SCXYoC,QACW,cAA7BvC,OAAOO,SAASiC,UAEe,UAA7BxC,OAAOO,SAASiC,UAEhBxC,OAAOO,SAASiC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLhC,QAAQgC,MAAMA,EAAMC,c","file":"static/js/main.7a8a8062.chunk.js","sourcesContent":["import React, { useContext } from 'react'\nimport styled from 'styled-components'\nimport { ClockContext } from './App'\n\nlet imgHeight = window.innerHeight\n\nconst Clock:React.FC = () => {\n\n    const currentTime = useContext(ClockContext)\n\n    // Reload this component when screen is rotated to update CSS\n    window.addEventListener(\"orientationchange\", () => {\n        window.location.reload()\n    })\n\n    return (\n        <div>\n            <StyledClock>\n                <ul>\n                    <li><span id=\"date\">{currentTime.toLocaleDateString()}</span></li>\n                    <li><span id=\"time\">{currentTime.toLocaleTimeString()}</span></li>\n                </ul>\n            </StyledClock>\n        </div>\n    )\n}\n\nexport default Clock\n\nconst StyledClock = styled.div`\n    /* basic font styles */\n    font-family: Courier New;\n    font-weight: 900;\n    z-index: 2;\n    top: ${imgHeight/2 - 80}px;\n\n    text-shadow: 2px 2px 0 #FFF, -2px -2px 0 #FFF,\n              -2px 2px 0 #FFF, 2px -2px 0 #FFF,\n              0px 2px 0 #FFF,  0-2px 0 #FFF,\n              -2px 0 0 #FFF, 2px 0 0 #FFF;\n\n    #time {\n        font-size: 150px;\n    }\n\n    #date {\n        font-size: 60px;\n    }\n\n    /* positional styles*/\n    left: 0;\n    right: 0;\n    bottom: 0;\n    position: absolute; /* necessary for overlay*/ \n    flex: 1;\n    align-self: 'absolute';\n\n    ul {\n        list-style: none;\n    }\n\n    /* config for mobile device */\n    @media (orientation: landscape) {\n        /* TODO: Use dynamic 'top' value */\n        top: ${imgHeight/2 - 120}px;\n    }\n\n    @media (orientation: portrait) {\n        #time {\n            font-size: 60px;\n        }\n\n        #date {\n            font-size: 40px;\n        }\n\n         /* TODO: Use dynamic 'left' value */\n        left: -30px;\n\n        /* positional styles*/\n        top: ${imgHeight/2 - 80}px;\n    }\n`\n\n","import React, { useEffect, useState, useContext } from 'react'\nimport styled from 'styled-components'\nimport Clock from './Clock'\nimport { ClockContext } from './App'\n\nconst Photo: React.FC = () => {\n\n    let imgWidth = window.innerWidth\n    let imgHeight = window.innerHeight\n    let imgSrc = `https://loremflickr.com/${imgWidth}/${imgHeight}/cat`\n\n    const currentTime = useContext(ClockContext)\n\n    // TODO: currentImgSrc の値を変えない方法で，<img> を再描画する方法を使用する\n    // TODO: 00秒ちょうどに画像が切り替わるようにする（ƒetchに3秒ぐらい時間がかかる）\n    \n    const [currentImgSrc, setCurrentImgSrc] = useState(()=> `https://loremflickr.com/${imgWidth}/${imgHeight}/cat`)\n    const [nextImgSrc, setNextImgSrc] = useState(()=> `https://loremflickr.com/${imgWidth}/${imgHeight}/cat`)\n\n    useEffect(() => {\n        return function cleanup(){\n            console.log(`clean up function: ${currentTime}`)\n            if(currentTime.toLocaleTimeString().slice(6, 9) == \"00\") {\n                setCurrentImgSrc(`https://loremflickr.com/${imgWidth}/${imgHeight}/cat?=${currentTime}`)\n            }\n        };\n    })\n\n    return (\n        <StyledPhoto>\n            <Clock />\n            <img width={imgWidth} height={imgHeight} src={currentImgSrc}/>\n        </StyledPhoto>\n    )\n}\n\nexport default Photo\n\nconst StyledPhoto = styled.div`\n    z-index: 1;\n`\n","import React, { createContext, useState, useEffect } from 'react';\nimport Photo from './Photo';\nimport './App.css';\n\nexport const ClockContext = createContext(new Date())\n\nfunction App() {\n  const [currentTime, setCurrentTime] = useState(() => new Date())\n\n  useEffect(() => {\n    let timerId = setInterval(()=>tick(),1000);\n    return function cleanup(){\n        clearInterval(timerId);\n    };\n  })\n\n  function tick() {\n      setCurrentTime(new Date())\n  }\n\n  return (\n    <div className=\"App\">\n      <ClockContext.Provider value={currentTime}>\n        <Photo />\n      </ClockContext.Provider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}